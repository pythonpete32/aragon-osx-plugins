{
  "address": "0xbE8B0279153eFDBEafa19330B575f83f16C64Ea9",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "counterBase",
      "outputs": [
        {
          "internalType": "contract CounterV1",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getImplementationAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "multiplyHelperBase",
      "outputs": [
        {
          "internalType": "contract MultiplyHelper",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_dao",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "prepareInstallation",
      "outputs": [
        {
          "internalType": "address",
          "name": "plugin",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "helpers",
          "type": "address[]"
        },
        {
          "components": [
            {
              "internalType": "enum PermissionLib.Operation",
              "name": "operation",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "where",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "who",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "oracle",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "permissionId",
              "type": "bytes32"
            }
          ],
          "internalType": "struct PermissionLib.ItemMultiTarget[]",
          "name": "permissions",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "prepareInstallationDataABI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_dao",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_plugin",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_activeHelpers",
          "type": "address[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "prepareUninstallation",
      "outputs": [
        {
          "components": [
            {
              "internalType": "enum PermissionLib.Operation",
              "name": "operation",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "where",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "who",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "oracle",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "permissionId",
              "type": "bytes32"
            }
          ],
          "internalType": "struct PermissionLib.ItemMultiTarget[]",
          "name": "permissions",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "prepareUninstallationDataABI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_dao",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_plugin",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_currentHelpers",
          "type": "address[]"
        },
        {
          "internalType": "uint16[3]",
          "name": "_oldVersion",
          "type": "uint16[3]"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "prepareUpdate",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "updatedHelpers",
          "type": "address[]"
        },
        {
          "internalType": "bytes",
          "name": "initData",
          "type": "bytes"
        },
        {
          "components": [
            {
              "internalType": "enum PermissionLib.Operation",
              "name": "operation",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "where",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "who",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "oracle",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "permissionId",
              "type": "bytes32"
            }
          ],
          "internalType": "struct PermissionLib.ItemMultiTarget[]",
          "name": "permissions",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "prepareUpdateDataABI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x4a20c514c07229876b73ce529900fdf1006eb992851d74e9c5409b5ac08f52ce",
  "receipt": {
    "to": null,
    "from": "0x47d80912400ef8f8224531EBEB1ce8f2ACf4b75a",
    "contractAddress": "0xbE8B0279153eFDBEafa19330B575f83f16C64Ea9",
    "transactionIndex": 180,
    "gasUsed": "3534982",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x5e2d54238ba03fb9635f3a68f72b957fc93182708af44028ab11aabd1d47069c",
    "transactionHash": "0x4a20c514c07229876b73ce529900fdf1006eb992851d74e9c5409b5ac08f52ce",
    "logs": [],
    "blockNumber": 7916799,
    "cumulativeGasUsed": "25453053",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "d1104b0ac8d892b7b10bda9ecaf25519",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"counterBase\",\"outputs\":[{\"internalType\":\"contract CounterV1\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getImplementationAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"multiplyHelperBase\",\"outputs\":[{\"internalType\":\"contract MultiplyHelper\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dao\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"prepareInstallation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"plugin\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"helpers\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"enum PermissionLib.Operation\",\"name\":\"operation\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"where\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"permissionId\",\"type\":\"bytes32\"}],\"internalType\":\"struct PermissionLib.ItemMultiTarget[]\",\"name\":\"permissions\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"prepareInstallationDataABI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dao\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_plugin\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_activeHelpers\",\"type\":\"address[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"prepareUninstallation\",\"outputs\":[{\"components\":[{\"internalType\":\"enum PermissionLib.Operation\",\"name\":\"operation\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"where\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"permissionId\",\"type\":\"bytes32\"}],\"internalType\":\"struct PermissionLib.ItemMultiTarget[]\",\"name\":\"permissions\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"prepareUninstallationDataABI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dao\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_plugin\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_currentHelpers\",\"type\":\"address[]\"},{\"internalType\":\"uint16[3]\",\"name\":\"_oldVersion\",\"type\":\"uint16[3]\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"prepareUpdate\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"updatedHelpers\",\"type\":\"address[]\"},{\"internalType\":\"bytes\",\"name\":\"initData\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"enum PermissionLib.Operation\",\"name\":\"operation\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"where\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"permissionId\",\"type\":\"bytes32\"}],\"internalType\":\"struct PermissionLib.ItemMultiTarget[]\",\"name\":\"permissions\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"prepareUpdateDataABI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Aragon Association - 2022\",\"kind\":\"dev\",\"methods\":{\"getImplementationAddress()\":{\"details\":\"The implementation can be instantiated via the `new` keyword, cloned via the minimal clones pattern (see [ERC-1167](https://eips.ethereum.org/EIPS/eip-1167)), or proxied via the UUPS pattern (see [ERC-1822](https://eips.ethereum.org/EIPS/eip-1822)).\",\"returns\":{\"_0\":\"address The address of the plugin implementation contract.\"}},\"prepareInstallation(address,bytes)\":{\"params\":{\"_dao\":\"The address of the installing DAO.\",\"_data\":\"The `bytes` encoded data containing the input parameters for the installation as specified in the `prepareInstallationDataABI()` function.\"},\"returns\":{\"helpers\":\"The address array of all helpers (contracts or EOAs) associated with the plugin after the installation.\",\"permissions\":\"The array of multi-targeted permission operations to be applied by the `PluginSetupProcessor` to the installing DAO.\",\"plugin\":\"The address of the `Plugin` contract being prepared for installation.\"}},\"prepareInstallationDataABI()\":{\"returns\":{\"_0\":\"The ABI in string format.\"}},\"prepareUninstallation(address,address,address[],bytes)\":{\"details\":\"The array of `_currentHelpers` has to be specified in the same order as they were returned from previous setups preparation steps (the latest `prepareInstallation` or `prepareUpdate` step that has happend) on which this update is prepared for.\",\"params\":{\"_currentHelpers\":\"The address array of all current helpers (contracts or EOAs) associated with the plugin to update from.\",\"_dao\":\"The address of the uninstalling DAO.\",\"_data\":\"The `bytes` encoded data containing the input parameters for the uninstalltion as specified in the `prepareUninstallationDataABI()` function.\",\"_plugin\":\"The address of the `Plugin` contract to update from.\"},\"returns\":{\"permissions\":\"The array of multi-targeted permission operations to be applied by the `PluginSetupProcessor` to the uninstalling DAO.\"}},\"prepareUninstallationDataABI()\":{\"returns\":{\"_0\":\"The ABI in string format.\"}},\"prepareUpdate(address,address,address[],uint16[3],bytes)\":{\"details\":\"The array of `_currentHelpers` has to be specified in the same order as they were returned from previous setups preparation steps (the latest `prepareInstallation` or `prepareUpdate` step that has happend) on which this update is prepared for.\",\"params\":{\"_currentHelpers\":\"The address array of all current helpers (contracts or EOAs) associated with the plugin to update from.\",\"_dao\":\"The address of the updating DAO.\",\"_data\":\"The `bytes` encoded data containing the input parameters for the update as specified in the `prepareUpdateDataABI()` function.\",\"_oldVersion\":\"The semantic version of the plugin to update from.\",\"_plugin\":\"The address of the `Plugin` contract to update from.\"},\"returns\":{\"initData\":\"The initialization data to be passed to upgradeable contracts when the update is applied in the `PluginSetupProcessor`.\",\"permissions\":\"The array of multi-targeted permission operations to be applied by the `PluginSetupProcessor` to the updating DAO.\",\"updatedHelpers\":\"The address array of helpers (contracts or EOAs) associated with the plugin after the update.\"}},\"prepareUpdateDataABI()\":{\"details\":\"The empty implemention is provided here so that this doesn't need to be overriden and implemented. This is relevant, for example, for the initial version of a plugin for which no update exists.\",\"returns\":{\"_0\":\"The ABI in string format.\"}},\"supportsInterface(bytes4)\":{\"params\":{\"interfaceId\":\"The ID of the interace.\"},\"returns\":{\"_0\":\"bool Returns true if the interface is supported.\"}}},\"title\":\"CounterV1PluginSetup\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getImplementationAddress()\":{\"notice\":\"Returns the plugin's base implementation.\"},\"prepareInstallation(address,bytes)\":{\"notice\":\"Prepares the installation of a plugin.\"},\"prepareInstallationDataABI()\":{\"notice\":\"The ABI required to decode the `bytes` data in `prepareInstallation()`.\"},\"prepareUninstallation(address,address,address[],bytes)\":{\"notice\":\"Prepares the uninstallation of a plugin.\"},\"prepareUninstallationDataABI()\":{\"notice\":\"The ABI required to decode the `bytes` data in `prepareUninstallation()`.\"},\"prepareUpdate(address,address,address[],uint16[3],bytes)\":{\"notice\":\"Prepares the update of a plugin.\"},\"prepareUpdateDataABI()\":{\"notice\":\"The ABI required to decode the `bytes` data in `prepareUpdate()`.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Checks if this or the parent contract supports an interface by its ID.\"}},\"notice\":\"The setup contract of the `CounterV1` plugin.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/counter/CounterV1PluginSetup.sol\":\"CounterV1PluginSetup\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x315887e846f1e5f8d8fa535a229d318bb9290aaa69485117f1ee8a9a6b3be823\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate that the this implementation remains valid after an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x6e36e9b4b71de699c2f3f0d4e4d1aa0b35da99a26e8d5b91ef09ba234b4ef270\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x09864aea84f01e39313375b5610c73a3c1c68abbdc51e5ccdd25ff977fdadf9a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x1d4afe6cb24200cc4545eed814ecf5847277dfe5d613a1707aad5fceecebcfff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/Clones.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create(0, ptr, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create2(0, ptr, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\\n            mstore(add(ptr, 0x4c), salt)\\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\\n            predicted := keccak256(add(ptr, 0x37), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt)\\n        internal\\n        view\\n        returns (address predicted)\\n    {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xae614c6b103b743c62e9544632f7ef4fc8950de4e9c783d2e765a3b86701dda3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/ERC1967/ERC1967Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Proxy.sol\\\";\\nimport \\\"./ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n */\\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\\n    /**\\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\\n     *\\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\\n     * function call, and allows initializing the storage of the proxy like a Solidity constructor.\\n     */\\n    constructor(address _logic, bytes memory _data) payable {\\n        _upgradeToAndCall(_logic, _data, false);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _implementation() internal view virtual override returns (address impl) {\\n        return ERC1967Upgrade._getImplementation();\\n    }\\n}\\n\",\"keccak256\":\"0xa2b22da3032e50b55f95ec1d13336102d675f341167aa76db571ef7f8bb7975d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967Upgrade {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xabf3f59bc0e5423eae45e459dbe92e7052c6983628d39008590edc852a62f94a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overridden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\",\"keccak256\":\"0xc130fe33f1b2132158531a87734153293f6d07bc263ff4ac90e85da9c82c0e27\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165Checker.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Library used to query support of an interface declared via {IERC165}.\\n *\\n * Note that these functions return the actual result of the query: they do not\\n * `revert` if an interface is not supported. It is up to the caller to decide\\n * what to do in these cases.\\n */\\nlibrary ERC165Checker {\\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\\n\\n    /**\\n     * @dev Returns true if `account` supports the {IERC165} interface,\\n     */\\n    function supportsERC165(address account) internal view returns (bool) {\\n        // Any contract that implements ERC165 must explicitly indicate support of\\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\\n        return\\n            _supportsERC165Interface(account, type(IERC165).interfaceId) &&\\n            !_supportsERC165Interface(account, _INTERFACE_ID_INVALID);\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports the interface defined by\\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // query support of both ERC165 as per the spec and support of _interfaceId\\n        return supportsERC165(account) && _supportsERC165Interface(account, interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns a boolean array where each value corresponds to the\\n     * interfaces passed in and whether they're supported or not. This allows\\n     * you to batch check interfaces for a contract where your expectation\\n     * is that some interfaces may not be supported.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function getSupportedInterfaces(address account, bytes4[] memory interfaceIds)\\n        internal\\n        view\\n        returns (bool[] memory)\\n    {\\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\\n\\n        // query support of ERC165 itself\\n        if (supportsERC165(account)) {\\n            // query support of each interface in interfaceIds\\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\\n                interfaceIdsSupported[i] = _supportsERC165Interface(account, interfaceIds[i]);\\n            }\\n        }\\n\\n        return interfaceIdsSupported;\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports all the interfaces defined in\\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * Batch-querying can lead to gas savings by skipping repeated checks for\\n     * {IERC165} support.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\\n        // query support of ERC165 itself\\n        if (!supportsERC165(account)) {\\n            return false;\\n        }\\n\\n        // query support of each interface in _interfaceIds\\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\\n            if (!_supportsERC165Interface(account, interfaceIds[i])) {\\n                return false;\\n            }\\n        }\\n\\n        // all interfaces supported\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Query if a contract implements an interface, does not check ERC165 support\\n     * @param account The address of the contract to query for support of an interface\\n     * @param interfaceId The interface identifier, as specified in ERC-165\\n     * @return true if the contract at account indicates support of the interface with\\n     * identifier interfaceId, false otherwise\\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\\n     * the behavior of this method is undefined. This precondition can be checked\\n     * with {supportsERC165}.\\n     * Interface identification is specified in ERC-165.\\n     */\\n    function _supportsERC165Interface(address account, bytes4 interfaceId) private view returns (bool) {\\n        bytes memory encodedParams = abi.encodeWithSelector(IERC165.supportsInterface.selector, interfaceId);\\n        (bool success, bytes memory result) = account.staticcall{gas: 30000}(encodedParams);\\n        if (result.length < 32) return false;\\n        return success && abi.decode(result, (bool));\\n    }\\n}\\n\",\"keccak256\":\"0xf7291d7213336b00ee7edbf7cd5034778dd7b0bda2a7489e664f1e5cacc6c24e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/counter/CounterV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\nimport {PluginUUPSUpgradeable} from \\\"../lib/plugin/PluginUUPSUpgradeable.sol\\\";\\nimport {MultiplyHelper} from \\\"./MultiplyHelper.sol\\\";\\nimport {IDAO} from \\\"../lib/interfaces/IDAO.sol\\\";\\n\\n/// @title CounterV1\\n/// @author Aragon Association - 2022\\n/// @notice The first version of an example plugin counting numbers.\\ncontract CounterV1 is PluginUUPSUpgradeable {\\n    /// @notice The ID of the permission required to call the `multiply` function.\\n    bytes32 public constant MULTIPLY_PERMISSION_ID =\\n        keccak256(\\\"MULTIPLY_PERMISSION\\\");\\n\\n    /// @notice A counter varaible.\\n    uint256 public count;\\n\\n    /// @notice A helper contract associated with the plugin.\\n    MultiplyHelper public multiplyHelper;\\n\\n    /// @notice Initializes the plugin.\\n    /// @param _dao The contract of the associated DAO.\\n    /// @param _multiplyHelper The helper contract associated with the plugin to multiply numbers.\\n    /// @param _count The inital value of the counter.\\n    function initialize(\\n        IDAO _dao,\\n        MultiplyHelper _multiplyHelper,\\n        uint256 _count\\n    ) external initializer {\\n        __PluginUUPSUpgradeable_init(_dao);\\n\\n        count = _count;\\n        multiplyHelper = _multiplyHelper;\\n    }\\n\\n    /// @notice Multiplies the count with a number.\\n    /// @param _a The number to multiply the coun with.\\n    function multiply(uint256 _a)\\n        public\\n        view\\n        auth(MULTIPLY_PERMISSION_ID)\\n        returns (uint256)\\n    {\\n        return multiplyHelper.multiply(count, _a);\\n    }\\n\\n    /// @notice Executes something on the DAO.\\n    function execute() public {\\n        // In order to do this, Count needs permission on the dao (EXEC_ROLE)\\n        //dao.execute(...)\\n    }\\n\\n    /// @notice This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain (see [OpenZepplins guide about storage gaps](https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps)).\\n    uint256[48] private __gap;\\n}\\n\",\"keccak256\":\"0xce7ce9fbc4be0eaa8eefed5368814dcb6c71d4955a59cf74b7d617e9599aabc8\",\"license\":\"MIT\"},\"contracts/counter/CounterV1PluginSetup.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\nimport {Clones} from \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\nimport {ERC1967Proxy} from \\\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\\\";\\n\\nimport {PermissionLib} from \\\"../lib/permission/PermissionLib.sol\\\";\\nimport {IPluginSetup} from \\\"../lib/interfaces/IPluginSetup.sol\\\";\\nimport {PluginSetup} from \\\"../lib/plugin/PluginSetup.sol\\\";\\nimport {MultiplyHelper} from \\\"./MultiplyHelper.sol\\\";\\nimport {CounterV1} from \\\"./CounterV1.sol\\\";\\n\\n/// @title CounterV1PluginSetup\\n/// @author Aragon Association - 2022\\n/// @notice The setup contract of the `CounterV1` plugin.\\ncontract CounterV1PluginSetup is PluginSetup {\\n    using Clones for address;\\n\\n    // For testing purposes, the below are public...\\n    MultiplyHelper public multiplyHelperBase;\\n    CounterV1 public counterBase;\\n\\n    address private constant NO_ORACLE = address(0);\\n\\n    constructor() {\\n        multiplyHelperBase = new MultiplyHelper();\\n        counterBase = new CounterV1();\\n    }\\n\\n    /// @inheritdoc IPluginSetup\\n    function prepareInstallationDataABI()\\n        external\\n        view\\n        virtual\\n        override\\n        returns (string memory)\\n    {\\n        return \\\"(address multiplyHelper, uint num)\\\";\\n    }\\n\\n    /// @inheritdoc IPluginSetup\\n    function prepareInstallation(address _dao, bytes memory _data)\\n        external\\n        virtual\\n        override\\n        returns (\\n            address plugin,\\n            address[] memory helpers,\\n            PermissionLib.ItemMultiTarget[] memory permissions\\n        )\\n    {\\n        // Decode the parameters from the UI\\n        (address _multiplyHelper, uint256 _num) = abi.decode(\\n            _data,\\n            (address, uint256)\\n        );\\n\\n        address multiplyHelper = _multiplyHelper;\\n\\n        if (_multiplyHelper == address(0)) {\\n            // deploy helper without our proxy..\\n            multiplyHelper = address(\\n                new ERC1967Proxy(address(multiplyHelperBase), bytes(\\\"\\\"))\\n            );\\n        }\\n\\n        bytes memory initData = abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"initialize(address,address,uint256)\\\")),\\n            _dao,\\n            multiplyHelper,\\n            _num\\n        );\\n\\n        permissions = new PermissionLib.ItemMultiTarget[](\\n            _multiplyHelper == address(0) ? 3 : 2\\n        );\\n        helpers = new address[](1);\\n\\n        // deploy\\n        plugin = createERC1967Proxy(address(counterBase), initData);\\n\\n        // set permissions\\n        permissions[0] = PermissionLib.ItemMultiTarget(\\n            PermissionLib.Operation.Grant,\\n            _dao,\\n            plugin,\\n            NO_ORACLE,\\n            keccak256(\\\"EXECUTE_PERMISSION\\\")\\n        );\\n\\n        permissions[1] = PermissionLib.ItemMultiTarget(\\n            PermissionLib.Operation.Grant,\\n            plugin,\\n            _dao,\\n            NO_ORACLE,\\n            counterBase.MULTIPLY_PERMISSION_ID()\\n        );\\n\\n        if (_multiplyHelper == address(0)) {\\n            permissions[2] = PermissionLib.ItemMultiTarget(\\n                PermissionLib.Operation.Grant,\\n                multiplyHelper,\\n                plugin,\\n                NO_ORACLE,\\n                multiplyHelperBase.MULTIPLY_PERMISSION_ID()\\n            );\\n        }\\n\\n        // add helpers\\n        helpers[0] = multiplyHelper;\\n\\n        return (plugin, helpers, permissions);\\n    }\\n\\n    /// @inheritdoc IPluginSetup\\n    function prepareUninstallationDataABI()\\n        external\\n        view\\n        virtual\\n        override\\n        returns (string memory)\\n    {\\n        return \\\"\\\";\\n    }\\n\\n    /// @inheritdoc IPluginSetup\\n    function prepareUninstallation(\\n        address _dao,\\n        address _plugin,\\n        address[] calldata _activeHelpers,\\n        bytes calldata\\n    )\\n        external\\n        virtual\\n        override\\n        returns (PermissionLib.ItemMultiTarget[] memory permissions)\\n    {\\n        permissions = new PermissionLib.ItemMultiTarget[](\\n            _activeHelpers.length != 0 ? 3 : 2\\n        );\\n\\n        // set permissions\\n        permissions[0] = PermissionLib.ItemMultiTarget(\\n            PermissionLib.Operation.Revoke,\\n            _dao,\\n            _plugin,\\n            NO_ORACLE,\\n            keccak256(\\\"EXECUTE_PERMISSION\\\")\\n        );\\n\\n        permissions[1] = PermissionLib.ItemMultiTarget(\\n            PermissionLib.Operation.Revoke,\\n            _plugin,\\n            _dao,\\n            NO_ORACLE,\\n            counterBase.MULTIPLY_PERMISSION_ID()\\n        );\\n\\n        if (_activeHelpers.length != 0) {\\n            permissions[2] = PermissionLib.ItemMultiTarget(\\n                PermissionLib.Operation.Revoke,\\n                _activeHelpers[0],\\n                _plugin,\\n                NO_ORACLE,\\n                multiplyHelperBase.MULTIPLY_PERMISSION_ID()\\n            );\\n        }\\n    }\\n\\n    /// @inheritdoc IPluginSetup\\n    function getImplementationAddress()\\n        external\\n        view\\n        virtual\\n        override\\n        returns (address)\\n    {\\n        return address(counterBase);\\n    }\\n}\\n\",\"keccak256\":\"0x60920b466573952e5543be50e5565572826d4c0918f83fc5cad66b2801470b88\",\"license\":\"MIT\"},\"contracts/counter/MultiplyHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\nimport {PluginUUPSUpgradeable} from \\\"../lib/plugin/PluginUUPSUpgradeable.sol\\\";\\n\\n/// @title MultiplyHelper\\n/// @author Aragon Association - 2022\\n/// @notice A helper contract providing a multiply function for the `CounterV1` and `CounterV2` example contracts.\\ncontract MultiplyHelper is PluginUUPSUpgradeable {\\n    /// @notice The ID of the permission required to call the `multiply` function.\\n    bytes32 public constant MULTIPLY_PERMISSION_ID =\\n        keccak256(\\\"MULTIPLY_PERMISSION\\\");\\n\\n    /// @notice Multiplies the count with a number.\\n    /// @param _a The number to multiply the coun with.\\n    function multiply(uint256 _a, uint256 _b)\\n        external\\n        view\\n        auth(MULTIPLY_PERMISSION_ID)\\n        returns (uint256)\\n    {\\n        return _a * _b;\\n    }\\n}\\n\",\"keccak256\":\"0xa028ab5ceb99a6df68e3b04c4249baf56ccdb6da496f5a06eb66fedc2507676e\",\"license\":\"MIT\"},\"contracts/lib/dao-authorizable/DaoAuthorizableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\n\\nimport {IDAO} from \\\"../interfaces/IDAO.sol\\\";\\nimport {DaoAuthorizableBaseUpgradeable} from \\\"./bases/DaoAuthorizableBaseUpgradeable.sol\\\";\\n\\n/// @title DaoAuthorizableUpgradeable\\n/// @author Aragon Association - 2022\\n/// @notice An abstract contract providing a meta-transaction compatible modifier for upgradeable contracts to authorize function calls through an associated DAO.\\n/// @dev Make sure to call `__DaoAuthorizableUpgradeable_init` during initialization of the inheriting contract.\\nabstract contract DaoAuthorizableUpgradeable is\\n    Initializable,\\n    ContextUpgradeable,\\n    DaoAuthorizableBaseUpgradeable\\n{\\n    /// @notice Initializes the contract by setting the associated DAO.\\n    /// @param _dao The associated DAO address.\\n    function __DaoAuthorizableUpgradeable_init(IDAO _dao)\\n        internal\\n        onlyInitializing\\n    {\\n        dao = _dao;\\n    }\\n\\n    /// @notice This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain (see [OpenZepplins guide about storage gaps](https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps)).\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x6b777d3592ed08aa086165ea15a1e369adba0e0deed5572549556ae610989912\",\"license\":\"MIT\"},\"contracts/lib/dao-authorizable/bases/DaoAuthorizableBaseUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\nimport {ContextUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\n\\nimport {_auth} from \\\"../../utils/auth.sol\\\";\\nimport {IDAO} from \\\"../../interfaces/IDAO.sol\\\";\\n\\n/// @title DaoAuthorizableBase\\n/// @author Aragon Association - 2022\\n/// @notice An abstract contract providing a meta transaction compatible modifier for upgradeable contracts to authorize function calls through an associated DAO.\\nabstract contract DaoAuthorizableBaseUpgradeable is ContextUpgradeable {\\n    /// @notice The associated DAO managing the permissions of inheriting contracts.\\n    IDAO internal dao;\\n\\n    /// @notice Returns the DAO contract.\\n    /// @return IDAO The DAO contract.\\n    function getDAO() external view returns (IDAO) {\\n        return dao;\\n    }\\n\\n    /// @notice A modifier to be used to check permissions on a target contract via the associated DAO.\\n    /// @param _permissionId The permission identifier required to call the method this modifier is applied to.\\n    modifier auth(bytes32 _permissionId) {\\n        _auth(dao, address(this), _msgSender(), _permissionId, _msgData());\\n        _;\\n    }\\n\\n    /// @notice This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain (see [OpenZepplins guide about storage gaps](https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps)).\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x23e1ed4b9951a946674257a690fd2f0e495970bc4a7beb410eba9b3699baba6a\",\"license\":\"MIT\"},\"contracts/lib/interfaces/IDAO.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\n/// @title IDAO\\n/// @author Aragon Association - 2022\\n/// @notice The interface required for DAOs within the Aragon App DAO framework.\\nabstract contract IDAO {\\n    struct Action {\\n        address to; // Address to call\\n        uint256 value; // Value to be sent with the call (for example ETH if on mainnet)\\n        bytes data; // Function selector + arguments\\n    }\\n\\n    /// @notice Checks if an address has permission on a contract via a permission identifier and considers if `ANY_ADDRESS` was used in the granting process.\\n    /// @param _where The address of the contract.\\n    /// @param _who The address of a EOA or contract to give the permissions.\\n    /// @param _permissionId The permission identifier.\\n    /// @param _data The optional data passed to the `PermissionOracle` registered.\\n    /// @return bool Returns true if the address has permission, false if not.\\n    function hasPermission(\\n        address _where,\\n        address _who,\\n        bytes32 _permissionId,\\n        bytes memory _data\\n    ) external view virtual returns (bool);\\n\\n    /// @notice Updates the DAO metadata (e.g., an IPFS hash).\\n    /// @param _metadata The IPFS hash of the new metadata object.\\n    function setMetadata(bytes calldata _metadata) external virtual;\\n\\n    /// @notice Emitted when the DAO metadata is updated.\\n    /// @param metadata The IPFS hash of the new metadata object.\\n    event MetadataSet(bytes metadata);\\n\\n    /// @notice Executes a list of actions.\\n    /// @dev Runs a loop through the array of actions and executes them one by one. If one action fails, all will be reverted.\\n    /// @param callId The id of the call. The definition of the value of callId is up to the calling contract and can be used, e.g., as a nonce.\\n    /// @param _actions The array of actions.\\n    /// @return bytes[] The array of results obtained from the executed actions in `bytes`.\\n    function execute(uint256 callId, Action[] memory _actions)\\n        external\\n        virtual\\n        returns (bytes[] memory);\\n\\n    /// @notice Emitted when a proposal is executed.\\n    /// @param actor The address of the caller.\\n    /// @param callId The id of the call.\\n    /// @dev The value of callId is defined by the component/contract calling the execute function.\\n    ///      A `Plugin` implementation can use it, for example, as a nonce.\\n    /// @param actions Array of actions executed.\\n    /// @param execResults Array with the results of the executed actions.\\n    event Executed(address indexed actor, uint256 callId, Action[] actions, bytes[] execResults);\\n\\n    /// @notice Emitted when a standard callback is registered.\\n    /// @param interfaceId The ID of the interface.\\n    /// @param callbackSelector The selector of the callback function.\\n    /// @param magicNumber The magic number to be registered for the callback function selector.\\n    event StandardCallbackRegistered(\\n        bytes4 interfaceId,\\n        bytes4 callbackSelector,\\n        bytes4 magicNumber\\n    );\\n\\n    /// @notice Deposits (native) tokens to the DAO contract with a reference string.\\n    /// @param _token The address of the token or address(0) in case of the native token.\\n    /// @param _amount The amount of tokens to deposit.\\n    /// @param _reference The reference describing the deposit reason.\\n    function deposit(\\n        address _token,\\n        uint256 _amount,\\n        string calldata _reference\\n    ) external payable virtual;\\n\\n    /// @notice Emitted when a token deposit has been made to the DAO.\\n    /// @param sender The address of the sender.\\n    /// @param token The address of the deposited token.\\n    /// @param amount The amount of tokens deposited.\\n    /// @param _reference The reference describing the deposit reason.\\n    event Deposited(\\n        address indexed sender,\\n        address indexed token,\\n        uint256 amount,\\n        string _reference\\n    );\\n\\n    /// @notice Emitted when a native token deposit has been made to the DAO.\\n    /// @dev This event is intended to be emitted in the `receive` function and is therefore bound by the gas limitations for `send`/`transfer` calls introduced by [ERC-2929](https://eips.ethereum.org/EIPS/eip-2929).\\n    /// @param sender The address of the sender.\\n    /// @param amount The amount of native tokens deposited.\\n    event NativeTokenDeposited(address sender, uint256 amount);\\n\\n    /// @notice Withdraw (native) tokens from the DAO with a withdraw reference string.\\n    /// @param _token The address of the token and address(0) in case of the native token.\\n    /// @param _to The target address to send (native) tokens to.\\n    /// @param _amount The amount of (native) tokens to withdraw.\\n    /// @param _reference The reference describing the withdrawal reason.\\n    function withdraw(\\n        address _token,\\n        address _to,\\n        uint256 _amount,\\n        string memory _reference\\n    ) external virtual;\\n\\n    /// @notice Emitted when a (native) token withdrawal has been made from the DAO.\\n    /// @param token The address of the withdrawn token or address(0) in case of the native token.\\n    /// @param to The address of the withdrawer.\\n    /// @param amount The amount of tokens withdrawn.\\n    /// @param _reference The reference describing the withdrawal reason.\\n    event Withdrawn(address indexed token, address indexed to, uint256 amount, string _reference);\\n\\n    /// @notice Setter for the trusted forwarder verifying the meta transaction.\\n    /// @param _trustedForwarder The trusted forwarder address.\\n    function setTrustedForwarder(address _trustedForwarder) external virtual;\\n\\n    /// @notice Getter for the trusted forwarder verifying the meta transaction.\\n    /// @return The trusted forwarder address.\\n    function getTrustedForwarder() external virtual returns (address);\\n\\n    /// @notice Emitted when a new TrustedForwarder is set on the DAO.\\n    /// @param forwarder the new forwarder address.\\n    event TrustedForwarderSet(address forwarder);\\n\\n    /// @notice Setter for the [ERC-1271](https://eips.ethereum.org/EIPS/eip-1271) signature validator contract.\\n    /// @param _signatureValidator The address of the signature validator.\\n    function setSignatureValidator(address _signatureValidator) external virtual;\\n\\n    /// @notice Emitted when the signature validator address is updated.\\n    /// @param signatureValidator The address of the signature validator.\\n    event SignatureValidatorSet(address signatureValidator);\\n\\n    /// @notice Checks whether a signature is valid for the provided data.\\n    /// @param _hash The keccak256 hash of arbitrary length data signed on the behalf of `address(this)`.\\n    /// @param _signature Signature byte array associated with _data.\\n    /// @return magicValue Returns the `bytes4` magic value `0x1626ba7e` if the signature is valid.\\n    function isValidSignature(bytes32 _hash, bytes memory _signature)\\n        external\\n        virtual\\n        returns (bytes4);\\n\\n    /// @notice Registers an ERC standard having a callback by registering its [ERC-165](https://eips.ethereum.org/EIPS/eip-165) interface ID and callback function signature.\\n    /// @param _interfaceId The ID of the interface.\\n    /// @param _callbackSelector The selector of the callback function.\\n    /// @param _magicNumber The magic number to be registered for the function signature.\\n    function registerStandardCallback(\\n        bytes4 _interfaceId,\\n        bytes4 _callbackSelector,\\n        bytes4 _magicNumber\\n    ) external virtual;\\n}\\n\",\"keccak256\":\"0xdb224793cd373298734d7d98895415f8c953ef0ebc502e76113cc4e67b39b605\",\"license\":\"MIT\"},\"contracts/lib/interfaces/IPlugin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\ninterface IPlugin {\\n    enum PluginType {\\n        UUPS,\\n        Cloneable,\\n        Constructable\\n    }\\n\\n    /// @notice returns the plugin's type\\n    function pluginType() external view returns (PluginType);\\n}\\n\",\"keccak256\":\"0x9e201bb6163754e4dea3b8822a10472f7c4f199a5dce563f734986ab9db9de6c\",\"license\":\"MIT\"},\"contracts/lib/interfaces/IPluginSetup.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\nimport {PermissionLib} from \\\"../permission/PermissionLib.sol\\\";\\n\\ninterface IPluginSetup {\\n    /// @notice The ABI required to decode the `bytes` data in `prepareInstallation()`.\\n    /// @return The ABI in string format.\\n    function prepareInstallationDataABI() external view returns (string memory);\\n\\n    /// @notice Prepares the installation of a plugin.\\n    /// @param _dao The address of the installing DAO.\\n    /// @param _data The `bytes` encoded data containing the input parameters for the installation as specified in the `prepareInstallationDataABI()` function.\\n    /// @return plugin The address of the `Plugin` contract being prepared for installation.\\n    /// @return helpers The address array of all helpers (contracts or EOAs) associated with the plugin after the installation.\\n    /// @return permissions The array of multi-targeted permission operations to be applied by the `PluginSetupProcessor` to the installing DAO.\\n    function prepareInstallation(address _dao, bytes memory _data)\\n        external\\n        returns (\\n            address plugin,\\n            address[] memory helpers,\\n            PermissionLib.ItemMultiTarget[] memory permissions\\n        );\\n\\n    /// @notice The ABI required to decode the `bytes` data in `prepareUpdate()`.\\n    /// @return The ABI in string format.\\n    /// @dev The empty implemention is provided here so that this doesn't need to be overriden and implemented. This is relevant, for example, for the initial version of a plugin for which no update exists.\\n    function prepareUpdateDataABI() external view returns (string memory);\\n\\n    /// @notice Prepares the update of a plugin.\\n    /// @param _dao The address of the updating DAO.\\n    /// @param _plugin The address of the `Plugin` contract to update from.\\n    /// @param _currentHelpers The address array of all current helpers (contracts or EOAs) associated with the plugin to update from.\\n    /// @param _oldVersion The semantic version of the plugin to update from.\\n    /// @param _data The `bytes` encoded data containing the input parameters for the update as specified in the `prepareUpdateDataABI()` function.\\n    /// @return updatedHelpers The address array of helpers (contracts or EOAs) associated with the plugin after the update.\\n    /// @return initData The initialization data to be passed to upgradeable contracts when the update is applied in the `PluginSetupProcessor`.\\n    /// @return permissions The array of multi-targeted permission operations to be applied by the `PluginSetupProcessor` to the updating DAO.\\n    /// @dev The array of `_currentHelpers` has to be specified in the same order as they were returned from previous setups preparation steps (the latest `prepareInstallation` or `prepareUpdate` step that has happend) on which this update is prepared for.\\n    function prepareUpdate(\\n        address _dao,\\n        address _plugin,\\n        address[] memory _currentHelpers,\\n        uint16[3] calldata _oldVersion,\\n        bytes memory _data\\n    )\\n        external\\n        returns (\\n            address[] memory updatedHelpers,\\n            bytes memory initData,\\n            PermissionLib.ItemMultiTarget[] memory permissions\\n        );\\n\\n    /// @notice The ABI required to decode the `bytes` data in `prepareUninstallation()`.\\n    /// @return The ABI in string format.\\n    function prepareUninstallationDataABI()\\n        external\\n        view\\n        returns (string memory);\\n\\n    /// @notice Prepares the uninstallation of a plugin.\\n    /// @param _dao The address of the uninstalling DAO.\\n    /// @param _plugin The address of the `Plugin` contract to update from.\\n    /// @param _currentHelpers The address array of all current helpers (contracts or EOAs) associated with the plugin to update from.\\n    /// @param _data The `bytes` encoded data containing the input parameters for the uninstalltion as specified in the `prepareUninstallationDataABI()` function.\\n    /// @return permissions The array of multi-targeted permission operations to be applied by the `PluginSetupProcessor` to the uninstalling DAO.\\n    /// @dev The array of `_currentHelpers` has to be specified in the same order as they were returned from previous setups preparation steps (the latest `prepareInstallation` or `prepareUpdate` step that has happend) on which this update is prepared for.\\n    function prepareUninstallation(\\n        address _dao,\\n        address _plugin,\\n        address[] calldata _currentHelpers,\\n        bytes calldata _data\\n    ) external returns (PermissionLib.ItemMultiTarget[] memory permissions);\\n\\n    /// @notice Returns the plugin's base implementation.\\n    /// @return address The address of the plugin implementation contract.\\n    /// @dev The implementation can be instantiated via the `new` keyword, cloned via the minimal clones pattern (see [ERC-1167](https://eips.ethereum.org/EIPS/eip-1167)), or proxied via the UUPS pattern (see [ERC-1822](https://eips.ethereum.org/EIPS/eip-1822)).\\n    function getImplementationAddress() external view returns (address);\\n}\\n\",\"keccak256\":\"0xa607055d8bccb4a60382ae6fb31a17bc579851ee2632d93be1c85a5c845f5292\",\"license\":\"MIT\"},\"contracts/lib/permission/PermissionLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\n/// @title PermissionLib\\n/// @author Aragon Association - 2021, 2022\\n/// @notice A library containing objects for permission processing.\\nlibrary PermissionLib {\\n    enum Operation {\\n        Grant,\\n        Revoke,\\n        Freeze,\\n        GrantWithOracle\\n    }\\n\\n    struct ItemSingleTarget {\\n        Operation operation;\\n        address who;\\n        bytes32 permissionId;\\n    }\\n\\n    struct ItemMultiTarget {\\n        Operation operation;\\n        address where;\\n        address who;\\n        address oracle;\\n        bytes32 permissionId;\\n    }\\n}\\n\",\"keccak256\":\"0x39c5d9de202e3b04ab815fb8ad58bc5ccbe8277530960a1dbb36cfeb3c3ee08c\",\"license\":\"MIT\"},\"contracts/lib/plugin/PluginSetup.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\nimport {ERC165} from \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport {ERC165Checker} from \\\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\\\";\\nimport {ERC1967Proxy} from \\\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\\\";\\nimport {Clones} from \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\n\\nimport {createERC1967Proxy as createERC1967} from \\\"../utils/Proxy.sol\\\";\\nimport {IPluginSetup} from \\\"../interfaces/IPluginSetup.sol\\\";\\n\\nimport {PermissionLib} from \\\"../permission/PermissionLib.sol\\\";\\n\\n/// @title PluginSetup\\n/// @author Aragon Association - 2022\\n/// @notice An abstract contract that developers have to inherit from to write the setup of a plugin.\\nabstract contract PluginSetup is ERC165, IPluginSetup {\\n    /// @inheritdoc IPluginSetup\\n    function prepareUpdateDataABI()\\n        external\\n        view\\n        virtual\\n        override\\n        returns (string memory)\\n    {}\\n\\n    /// @inheritdoc IPluginSetup\\n    function prepareUpdate(\\n        address _dao,\\n        address _plugin,\\n        address[] memory _currentHelpers,\\n        uint16[3] calldata _oldVersion,\\n        bytes memory _data\\n    )\\n        external\\n        virtual\\n        override\\n        returns (\\n            address[] memory updatedHelpers,\\n            bytes memory initData,\\n            PermissionLib.ItemMultiTarget[] memory permissions\\n        )\\n    {}\\n\\n    /// @notice A convenience function to create an [ERC-1967](https://eips.ethereum.org/EIPS/eip-1967) proxy contract pointing to an implementation and being associated to a DAO.\\n    /// @param _implementation The address of the implementation contract to which the proxy is pointing to.\\n    /// @param _data The data to initialize the storage of the proxy contract.\\n    /// @return address The address of the created proxy contract.\\n    function createERC1967Proxy(address _implementation, bytes memory _data)\\n        internal\\n        returns (address)\\n    {\\n        return createERC1967(_implementation, _data);\\n    }\\n\\n    /// @notice Checks if this or the parent contract supports an interface by its ID.\\n    /// @param interfaceId The ID of the interace.\\n    /// @return bool Returns true if the interface is supported.\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == type(IPluginSetup).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xa0797faea1f7714d6027ff5eaa324ce8ffc19deffaba995e8c799d892a056886\",\"license\":\"MIT\"},\"contracts/lib/plugin/PluginUUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\nimport {UUPSUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport {IERC1822ProxiableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\\\";\\n\\nimport {ERC165Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\\\";\\nimport {DaoAuthorizableUpgradeable} from \\\"../dao-authorizable/DaoAuthorizableUpgradeable.sol\\\";\\nimport {IDAO} from \\\"../interfaces/IDAO.sol\\\";\\nimport {IPlugin} from \\\"../interfaces/IPlugin.sol\\\";\\n\\n/// @title PluginUUPSUpgradeable\\n/// @author Aragon Association - 2022\\n/// @notice An abstract, upgradeable contract to inherit from when creating a plugin being deployed via the UUPS pattern (see [ERC-1822](https://eips.ethereum.org/EIPS/eip-1822)).\\nabstract contract PluginUUPSUpgradeable is\\n    IPlugin,\\n    ERC165Upgradeable,\\n    UUPSUpgradeable,\\n    DaoAuthorizableUpgradeable\\n{\\n    // NOTE: When adding new state variables to the contract, the size of `_gap` has to be adapted below as well.\\n\\n    /// @inheritdoc IPlugin\\n    function pluginType() public pure override returns (PluginType) {\\n        return PluginType.UUPS;\\n    }\\n\\n    /// @notice The ID of the permission required to call the `_authorizeUpgrade` function.\\n    bytes32 public constant UPGRADE_PLUGIN_PERMISSION_ID =\\n        keccak256(\\\"UPGRADE_PLUGIN_PERMISSION\\\");\\n\\n    /// @notice Initializes the plugin by storing the associated DAO.\\n    /// @param _dao The DAO contract.\\n    function __PluginUUPSUpgradeable_init(IDAO _dao)\\n        internal\\n        virtual\\n        onlyInitializing\\n    {\\n        __DaoAuthorizableUpgradeable_init(_dao);\\n    }\\n\\n    /// @notice Checks if an interface is supported by this or its parent contract.\\n    /// @param _interfaceId The ID of the interace.\\n    /// @return bool Returns true if the interface is supported.\\n    function supportsInterface(bytes4 _interfaceId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        return\\n            _interfaceId == type(IPlugin).interfaceId ||\\n            _interfaceId == type(IERC1822ProxiableUpgradeable).interfaceId ||\\n            super.supportsInterface(_interfaceId);\\n    }\\n\\n    /// @notice Returns the address of the implementation contract in the [proxy storage slot](https://eips.ethereum.org/EIPS/eip-1967) slot the [UUPS proxy](https://eips.ethereum.org/EIPS/eip-1822) is pointing to.\\n    /// @return implementation The address of the implementation contract.\\n    function getImplementationAddress()\\n        public\\n        view\\n        returns (address implementation)\\n    {\\n        implementation = _getImplementation();\\n    }\\n\\n    /// @notice Internal method authorizing the upgrade of the contract via the [upgradeabilty mechanism for UUPS proxies](https://docs.openzeppelin.com/contracts/4.x/api/proxy#UUPSUpgradeable) (see [ERC-1822](https://eips.ethereum.org/EIPS/eip-1822)).\\n    /// @dev The caller must have the `UPGRADE_PLUGIN_PERMISSION_ID` permission.\\n    function _authorizeUpgrade(address)\\n        internal\\n        virtual\\n        override\\n        auth(UPGRADE_PLUGIN_PERMISSION_ID)\\n    {}\\n\\n    /// @notice This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain (see [OpenZepplins guide about storage gaps](https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps)).\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xde99a66a0f325bfa289d3173e0e357f8ae62c6d71c4df7752ded73e5f11347cc\",\"license\":\"MIT\"},\"contracts/lib/utils/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\\\";\\n\\n/// @notice Free function to create a [ERC-1967](https://eips.ethereum.org/EIPS/eip-1967) proxy contract based on the passed base contract address.\\n/// @param _logic The base contract address.\\n/// @param _data The constructor arguments for this contract.\\n/// @return address The address of the proxy contract created.\\n/// @dev Initializes the upgradeable proxy with an initial implementation specified by _logic. If _data is non-empty, it\\u2019s used as data in a delegate call to _logic. This will typically be an encoded function call, and allows initializing the storage of the proxy like a Solidity constructor (see [OpenZepplin ERC1967Proxy-constructor](https://docs.openzeppelin.com/contracts/4.x/api/proxy#ERC1967Proxy-constructor-address-bytes-)).\\nfunction createERC1967Proxy(address _logic, bytes memory _data) returns (address) {\\n    return address(new ERC1967Proxy(_logic, _data));\\n}\\n\",\"keccak256\":\"0xa04ed9408564986fa70afbd6d6cd437867db7207070d62b4b928c24c12842ffc\",\"license\":\"MIT\"},\"contracts/lib/utils/auth.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\nimport {IDAO} from \\\"../interfaces/IDAO.sol\\\";\\n\\n/// @notice Thrown if a call is unauthorized in the associated DAO.\\n/// @param dao The associated DAO.\\n/// @param here The context in which the authorization reverted.\\n/// @param where The contract requiring the permission.\\n/// @param who The address (EOA or contract) missing the permission.\\n/// @param permissionId The permission identifier.\\nerror DaoUnauthorized(\\n    address dao,\\n    address here,\\n    address where,\\n    address who,\\n    bytes32 permissionId\\n);\\n\\n/// @notice Free function to to be used by the auth modifier to check permissions on a target contract via the associated DAO.\\n/// @param _permissionId The permission identifier.\\nfunction _auth(\\n    IDAO _dao,\\n    address addressThis,\\n    address _msgSender,\\n    bytes32 _permissionId,\\n    bytes calldata _msgData\\n) view {\\n    if (!_dao.hasPermission(addressThis, _msgSender, _permissionId, _msgData))\\n        revert DaoUnauthorized({\\n            dao: address(_dao),\\n            here: addressThis,\\n            where: addressThis,\\n            who: _msgSender,\\n            permissionId: _permissionId\\n        });\\n}\\n\",\"keccak256\":\"0xcca004a27015941cf7e943befc492e38eac90eda9729f7adcc09df5d906e6607\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405161001d906100a8565b604051809103906000f080158015610039573d6000803e3d6000fd5b50600080546001600160a01b0319166001600160a01b0392909216919091179055604051610066906100b5565b604051809103906000f080158015610082573d6000803e3d6000fd5b50600180546001600160a01b0319166001600160a01b03929092169190911790556100c2565b611091806119cd83390190565b61145880612a5e83390190565b6118fc806100d16000396000f3fe60806040523480156200001157600080fd5b5060043610620000cd5760003560e01c806351c68301116200007f578063a5d1805a1162000062578063a5d1805a14620001c3578063eee774ca14620001cb578063f10832f114620001df57600080fd5b806351c68301146200017c5780637004cac1146200019157600080fd5b80630cbcae7011620000b45780630cbcae70146200012b578063309227b8146200013d5780633bb1847f146200015657600080fd5b806301ffc9a714620000d25780630af30a7f14620000fe575b600080fd5b620000e9620000e336600462000aa2565b62000207565b60405190151581526020015b60405180910390f35b60015462000112906001600160a01b031681565b6040516001600160a01b039091168152602001620000f5565b6001546001600160a01b031662000112565b62000147620002a1565b604051620000f5919062000b36565b6200016d6200016736600462000bb0565b620002c2565b604051620000f5919062000d19565b60408051602081019091526000815262000147565b620001b2620001a236600462000e01565b6060806060955095509592505050565b604051620000f59392919062000f6c565b606062000147565b60005462000112906001600160a01b031681565b620001f6620001f036600462000fab565b620005d2565b604051620000f59392919062001001565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f7284f6dc0000000000000000000000000000000000000000000000000000000014806200029b57507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b6060604051806060016040528060228152602001620018a560229139905090565b606083620002d2576002620002d5565b60035b60ff1667ffffffffffffffff811115620002f357620002f362000d2e565b6040519080825280602002602001820160405280156200034e57816020015b6040805160a081018252600080825260208083018290529282018190526060820181905260808201528252600019909201910181620003125790505b506040805160a081019091529091508060018152602001886001600160a01b03168152602001876001600160a01b0316815260200160006001600160a01b031681526020017fbf04b4486c9663d805744005c3da000eda93de6e3308a4a7a812eb565327b78d81525081600081518110620003cd57620003cd62001039565b60209081029190910101526040805160a081019091528060018152602001876001600160a01b03168152602001886001600160a01b0316815260200160006001600160a01b03168152602001600160009054906101000a90046001600160a01b03166001600160a01b031663b73fa1e76040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200046d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200049391906200104f565b81525081600181518110620004ac57620004ac62001039565b60209081029190910101528315620005c8576040805160a08101909152806001815260200186866000818110620004e757620004e762001039565b9050602002016020810190620004fe919062001069565b6001600160a01b03168152602001876001600160a01b0316815260200160006001600160a01b0316815260200160008054906101000a90046001600160a01b03166001600160a01b031663b73fa1e76040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200057d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620005a391906200104f565b81525081600281518110620005bc57620005bc62001039565b60200260200101819052505b9695505050505050565b600060608060008085806020019051810190620005f0919062001089565b9092509050816001600160a01b0381166200065d576000805460408051602081018252928352516001600160a01b0390911691906200062f9062000a94565b6200063c929190620010ba565b604051809103906000f08015801562000659573d6000803e3d6000fd5b5090505b604080516001600160a01b038a81166024830152838116604483015260648083018690528351808403909101815260849092019092526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f1794bb3c0000000000000000000000000000000000000000000000000000000017905290841615620006ec576002620006ef565b60035b60ff1667ffffffffffffffff8111156200070d576200070d62000d2e565b6040519080825280602002602001820160405280156200076857816020015b6040805160a0810182526000808252602080830182905292820181905260608201819052608082015282526000199092019101816200072c5790505b506040805160018082528183019092529196506020808301908036833701905050600154909650620007a4906001600160a01b03168262000a3b565b6040805160a0810190915290975080600081526020018a6001600160a01b03168152602001886001600160a01b0316815260200160006001600160a01b031681526020017fbf04b4486c9663d805744005c3da000eda93de6e3308a4a7a812eb565327b78d8152508560008151811062000822576200082262001039565b60209081029190910101526040805160a081019091528060008152602001886001600160a01b031681526020018a6001600160a01b0316815260200160006001600160a01b03168152602001600160009054906101000a90046001600160a01b03166001600160a01b031663b73fa1e76040518163ffffffff1660e01b8152600401602060405180830381865afa158015620008c2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620008e891906200104f565b8152508560018151811062000901576200090162001039565b60209081029190910101526001600160a01b038416620009f9576040805160a081019091528060008152602001836001600160a01b03168152602001886001600160a01b0316815260200160006001600160a01b0316815260200160008054906101000a90046001600160a01b03166001600160a01b031663b73fa1e76040518163ffffffff1660e01b8152600401602060405180830381865afa158015620009ae573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620009d491906200104f565b81525085600281518110620009ed57620009ed62001039565b60200260200101819052505b818660008151811062000a105762000a1062001039565b60200260200101906001600160a01b031690816001600160a01b031681525050505050509250925092565b600062000a49838362000a50565b9392505050565b6000828260405162000a629062000a94565b62000a6f929190620010ba565b604051809103906000f08015801562000a8c573d6000803e3d6000fd5b509392505050565b6107be80620010e783390190565b60006020828403121562000ab557600080fd5b81357fffffffff000000000000000000000000000000000000000000000000000000008116811462000a4957600080fd5b6000815180845260005b8181101562000b0e5760208185018101518683018201520162000af0565b8181111562000b21576000602083870101525b50601f01601f19169290920160200192915050565b60208152600062000a49602083018462000ae6565b6001600160a01b038116811462000b6157600080fd5b50565b60008083601f84011262000b7757600080fd5b50813567ffffffffffffffff81111562000b9057600080fd5b60208301915083602082850101111562000ba957600080fd5b9250929050565b6000806000806000806080878903121562000bca57600080fd5b863562000bd78162000b4b565b9550602087013562000be98162000b4b565b9450604087013567ffffffffffffffff8082111562000c0757600080fd5b818901915089601f83011262000c1c57600080fd5b81358181111562000c2c57600080fd5b8a60208260051b850101111562000c4257600080fd5b60208301965080955050606089013591508082111562000c6157600080fd5b5062000c7089828a0162000b64565b979a9699509497509295939492505050565b60008151808452602080850194508084016000805b8481101562000d0d5782518051600480821062000cc157634e487b7160e01b855260218152602485fd5b508952808501516001600160a01b03908116868b01526040808301518216908b0152606080830151909116908a01526080908101519089015260a0909701969183019160010162000c97565b50959695505050505050565b60208152600062000a49602083018462000c82565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171562000d705762000d7062000d2e565b604052919050565b80606081018310156200029b57600080fd5b600082601f83011262000d9c57600080fd5b813567ffffffffffffffff81111562000db95762000db962000d2e565b62000dce6020601f19601f8401160162000d44565b81815284602083860101111562000de457600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060e0868803121562000e1a57600080fd5b853562000e278162000b4b565b945060208681013562000e3a8162000b4b565b9450604087013567ffffffffffffffff8082111562000e5857600080fd5b818901915089601f83011262000e6d57600080fd5b81358181111562000e825762000e8262000d2e565b8060051b62000e9385820162000d44565b918252838101850191858101908d84111562000eae57600080fd5b948601945b8386101562000edc578535925062000ecb8362000b4b565b828252948601949086019062000eb3565b8099505050505062000ef28a60608b0162000d78565b945060c089013592508083111562000f0957600080fd5b505062000f198882890162000d8a565b9150509295509295909350565b600081518084526020808501945080840160005b8381101562000f615781516001600160a01b03168752958201959082019060010162000f3a565b509495945050505050565b60608152600062000f81606083018662000f26565b828103602084015262000f95818662000ae6565b90508281036040840152620005c8818562000c82565b6000806040838503121562000fbf57600080fd5b823562000fcc8162000b4b565b9150602083013567ffffffffffffffff81111562000fe957600080fd5b62000ff78582860162000d8a565b9150509250929050565b6001600160a01b038416815260606020820152600062001025606083018562000f26565b8281036040840152620005c8818562000c82565b634e487b7160e01b600052603260045260246000fd5b6000602082840312156200106257600080fd5b5051919050565b6000602082840312156200107c57600080fd5b813562000a498162000b4b565b600080604083850312156200109d57600080fd5b8251620010aa8162000b4b565b6020939093015192949293505050565b6001600160a01b0383168152604060208201526000620010de604083018462000ae6565b94935050505056fe60806040526040516107be3803806107be83398101604081905261002291610314565b61002e82826000610035565b5050610431565b61003e8361006b565b60008251118061004b5750805b156100665761006483836100ab60201b6100291760201c565b505b505050565b610074816100d7565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606100d08383604051806060016040528060278152602001610797602791396101a9565b9392505050565b6100ea8161028760201b6100551760201c565b6101515760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084015b60405180910390fd5b806101887f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b61029660201b6100711760201c565b80546001600160a01b0319166001600160a01b039290921691909117905550565b60606001600160a01b0384163b6102115760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610148565b600080856001600160a01b03168560405161022c91906103e2565b600060405180830381855af49150503d8060008114610267576040519150601f19603f3d011682016040523d82523d6000602084013e61026c565b606091505b50909250905061027d828286610299565b9695505050505050565b6001600160a01b03163b151590565b90565b606083156102a85750816100d0565b8251156102b85782518084602001fd5b8160405162461bcd60e51b815260040161014891906103fe565b634e487b7160e01b600052604160045260246000fd5b60005b838110156103035781810151838201526020016102eb565b838111156100645750506000910152565b6000806040838503121561032757600080fd5b82516001600160a01b038116811461033e57600080fd5b60208401519092506001600160401b038082111561035b57600080fd5b818501915085601f83011261036f57600080fd5b815181811115610381576103816102d2565b604051601f8201601f19908116603f011681019083821181831017156103a9576103a96102d2565b816040528281528860208487010111156103c257600080fd5b6103d38360208301602088016102e8565b80955050505050509250929050565b600082516103f48184602087016102e8565b9190910192915050565b602081526000825180602084015261041d8160408501602087016102e8565b601f01601f19169190910160400192915050565b610357806104406000396000f3fe60806040523661001357610011610017565b005b6100115b610027610022610074565b6100b9565b565b606061004e83836040518060600160405280602781526020016102fb602791396100dd565b9392505050565b73ffffffffffffffffffffffffffffffffffffffff163b151590565b90565b60006100b47f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5473ffffffffffffffffffffffffffffffffffffffff1690565b905090565b3660008037600080366000845af43d6000803e8080156100d8573d6000f35b3d6000fd5b606073ffffffffffffffffffffffffffffffffffffffff84163b610188576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e7472616374000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6000808573ffffffffffffffffffffffffffffffffffffffff16856040516101b0919061028d565b600060405180830381855af49150503d80600081146101eb576040519150601f19603f3d011682016040523d82523d6000602084013e6101f0565b606091505b509150915061020082828661020a565b9695505050505050565b6060831561021957508161004e565b8251156102295782518084602001fd5b816040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161017f91906102a9565b60005b83811015610278578181015183820152602001610260565b83811115610287576000848401525b50505050565b6000825161029f81846020870161025d565b9190910192915050565b60208152600082518060208401526102c881604085016020870161025d565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220541b917e30cdb6190a188d89351df658042e2f895a39400f1e3b929696bd0a0064736f6c634300080a0033416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c65642861646472657373206d756c7469706c7948656c7065722c2075696e74206e756d29a2646970667358221220f5f2a4f17873d6b47808eff9b97cdafa0d6548f63ea60f6a765329f34a38bc3664736f6c634300080a003360a06040523060805234801561001457600080fd5b5060805161104561004c600039600081816103ad0152818161044801528181610550015281816105e601526106e101526110456000f3fe6080604052600436106100b15760003560e01c80634f1ef28611610069578063985da7261161004e578063985da726146101ac578063b73fa1e7146101ca578063c9c4bfca146101fe57600080fd5b80634f1ef2861461018457806352d1902d1461019757600080fd5b8063165c4a161161009a578063165c4a16146101185780633659cfe61461014657806341de68301461016857600080fd5b806301ffc9a7146100b65780630cbcae70146100eb575b600080fd5b3480156100c257600080fd5b506100d66100d1366004610cf8565b610232565b60405190151581526020015b60405180910390f35b3480156100f757600080fd5b50610100610317565b6040516001600160a01b0390911681526020016100e2565b34801561012457600080fd5b50610138610133366004610d3a565b61034f565b6040519081526020016100e2565b34801561015257600080fd5b50610166610161366004610d78565b6103a2565b005b34801561017457600080fd5b5060006040516100e29190610d93565b610166610192366004610dd1565b610545565b3480156101a357600080fd5b506101386106d4565b3480156101b857600080fd5b5060c9546001600160a01b0316610100565b3480156101d657600080fd5b506101387f293ab483515bb2dc32ac9b2dfb9c39ee4ea5571530c34de9864c3e5fa9ce787d81565b34801561020a57600080fd5b506101387f821b6e3a557148015a918c89e5d092e878a69854a2d1a410635f771bd5a8a3f581565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f41de68300000000000000000000000000000000000000000000000000000000014806102c557507fffffffff0000000000000000000000000000000000000000000000000000000082167f52d1902d00000000000000000000000000000000000000000000000000000000145b8061031157507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b600061034a7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b905090565b60c9546000907f293ab483515bb2dc32ac9b2dfb9c39ee4ea5571530c34de9864c3e5fa9ce787d90610390906001600160a01b031630335b84600036610799565b61039a8385610e93565b949350505050565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156104465760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c000000000000000000000000000000000000000060648201526084015b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166104a17f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b03161461051d5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f78790000000000000000000000000000000000000000606482015260840161043d565b6105268161088e565b60408051600080825260208201909252610542918391906108c7565b50565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156105e45760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c0000000000000000000000000000000000000000606482015260840161043d565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661063f7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b0316146106bb5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f78790000000000000000000000000000000000000000606482015260840161043d565b6106c48261088e565b6106d0828260016108c7565b5050565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146107745760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c0000000000000000606482015260840161043d565b507f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc90565b6040517ffdef91060000000000000000000000000000000000000000000000000000000081526001600160a01b0387169063fdef9106906107e69088908890889088908890600401610ede565b602060405180830381865afa158015610803573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108279190610f32565b610886576040517f5caaf8930000000000000000000000000000000000000000000000000000000081526001600160a01b038088166004830152808716602483018190526044830152851660648201526084810184905260a40161043d565b505050505050565b60c9547f821b6e3a557148015a918c89e5d092e878a69854a2d1a410635f771bd5a8a3f5906106d0906001600160a01b03163033610387565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156108ff576108fa83610a6c565b505050565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015610959575060408051601f3d908101601f1916820190925261095691810190610f54565b60015b6109cb5760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f742055555053000000000000000000000000000000000000606482015260840161043d565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8114610a605760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f7860448201527f6961626c65555549440000000000000000000000000000000000000000000000606482015260840161043d565b506108fa838383610b42565b6001600160a01b0381163b610ae95760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e747261637400000000000000000000000000000000000000606482015260840161043d565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b610b4b83610b6d565b600082511180610b585750805b156108fa57610b678383610bad565b50505050565b610b7681610a6c565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b610c2c5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e74726163740000000000000000000000000000000000000000000000000000606482015260840161043d565b600080846001600160a01b031684604051610c479190610f99565b600060405180830381855af49150503d8060008114610c82576040519150601f19603f3d011682016040523d82523d6000602084013e610c87565b606091505b5091509150610caf8282604051806060016040528060278152602001610fe960279139610cb8565b95945050505050565b60608315610cc7575081610cf1565b825115610cd75782518084602001fd5b8160405162461bcd60e51b815260040161043d9190610fb5565b9392505050565b600060208284031215610d0a57600080fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114610cf157600080fd5b60008060408385031215610d4d57600080fd5b50508035926020909101359150565b80356001600160a01b0381168114610d7357600080fd5b919050565b600060208284031215610d8a57600080fd5b610cf182610d5c565b6020810160038310610db557634e487b7160e01b600052602160045260246000fd5b91905290565b634e487b7160e01b600052604160045260246000fd5b60008060408385031215610de457600080fd5b610ded83610d5c565b9150602083013567ffffffffffffffff80821115610e0a57600080fd5b818501915085601f830112610e1e57600080fd5b813581811115610e3057610e30610dbb565b604051601f8201601f19908116603f01168101908382118183101715610e5857610e58610dbb565b81604052828152886020848701011115610e7157600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610ed957634e487b7160e01b600052601160045260246000fd5b500290565b60006001600160a01b03808816835280871660208401525084604083015260806060830152826080830152828460a0840137600060a0848401015260a0601f19601f85011683010190509695505050505050565b600060208284031215610f4457600080fd5b81518015158114610cf157600080fd5b600060208284031215610f6657600080fd5b5051919050565b60005b83811015610f88578181015183820152602001610f70565b83811115610b675750506000910152565b60008251610fab818460208701610f6d565b9190910192915050565b6020815260008251806020840152610fd4816040850160208701610f6d565b601f01601f1916919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220693e253077da3b637f47ce81ca098bdbf96173da74b8c8b373f1438029423f5d64736f6c634300080a003360a06040523060805234801561001457600080fd5b5060805161140c61004c60003960008181610563015281816105f901528181610701015281816107970152610892015261140c6000f3fe6080604052600436106100dd5760003560e01c806352d1902d1161007f5780639b97d03a116100595780639b97d03a1461021c578063b73fa1e71461023d578063c6888fa114610271578063c9c4bfca1461029157600080fd5b806352d1902d146101da57806361461954146101ef578063985da726146101fe57600080fd5b80631794bb3c116100bb5780631794bb3c146101695780633659cfe61461018b57806341de6830146101ab5780634f1ef286146101c757600080fd5b806301ffc9a7146100e257806306661abd146101175780630cbcae701461013c575b600080fd5b3480156100ee57600080fd5b506101026100fd3660046110a3565b6102c5565b60405190151581526020015b60405180910390f35b34801561012357600080fd5b5061012e61015f5481565b60405190815260200161010e565b34801561014857600080fd5b506101516103aa565b6040516001600160a01b03909116815260200161010e565b34801561017557600080fd5b506101896101843660046110fa565b6103e2565b005b34801561019757600080fd5b506101896101a636600461113b565b610558565b3480156101b757600080fd5b50600060405161010e9190611158565b6101896101d53660046111c8565b6106f6565b3480156101e657600080fd5b5061012e610885565b3480156101fb57600080fd5b50005b34801561020a57600080fd5b5060c9546001600160a01b0316610151565b34801561022857600080fd5b5061016054610151906001600160a01b031681565b34801561024957600080fd5b5061012e7f293ab483515bb2dc32ac9b2dfb9c39ee4ea5571530c34de9864c3e5fa9ce787d81565b34801561027d57600080fd5b5061012e61028c36600461128c565b61094a565b34801561029d57600080fd5b5061012e7f821b6e3a557148015a918c89e5d092e878a69854a2d1a410635f771bd5a8a3f581565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f41de683000000000000000000000000000000000000000000000000000000000148061035857507fffffffff0000000000000000000000000000000000000000000000000000000082167f52d1902d00000000000000000000000000000000000000000000000000000000145b806103a457507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b60006103dd7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b905090565b600054610100900460ff16158080156104025750600054600160ff909116105b8061041c5750303b15801561041c575060005460ff166001145b6104935760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084015b60405180910390fd5b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905580156104d4576000805461ff0019166101001790555b6104dd84610a2a565b61015f829055610160805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0385161790558015610552576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156105f75760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c0000000000000000000000000000000000000000606482015260840161048a565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166106527f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b0316146106ce5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f78790000000000000000000000000000000000000000606482015260840161048a565b6106d781610ab0565b604080516000808252602082019092526106f391839190610ae9565b50565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156107955760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c0000000000000000000000000000000000000000606482015260840161048a565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166107f07f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b6001600160a01b03161461086c5760405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f78790000000000000000000000000000000000000000606482015260840161048a565b61087582610ab0565b61088182826001610ae9565b5050565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146109255760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c0000000000000000606482015260840161048a565b507f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc90565b60c9546000907f293ab483515bb2dc32ac9b2dfb9c39ee4ea5571530c34de9864c3e5fa9ce787d9061098b906001600160a01b031630335b84600036610c8e565b6101605461015f546040517f165c4a160000000000000000000000000000000000000000000000000000000081526001600160a01b039092169163165c4a16916109e2918790600401918252602082015260400190565b602060405180830381865afa1580156109ff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a2391906112a5565b9392505050565b600054610100900460ff16610aa75760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e67000000000000000000000000000000000000000000606482015260840161048a565b6106f381610d83565b60c9547f821b6e3a557148015a918c89e5d092e878a69854a2d1a410635f771bd5a8a3f590610881906001600160a01b03163033610982565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615610b2157610b1c83610e2f565b505050565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015610b7b575060408051601f3d908101601f19168201909252610b78918101906112a5565b60015b610bed5760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f742055555053000000000000000000000000000000000000606482015260840161048a565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8114610c825760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f7860448201527f6961626c65555549440000000000000000000000000000000000000000000000606482015260840161048a565b50610b1c838383610efa565b6040517ffdef91060000000000000000000000000000000000000000000000000000000081526001600160a01b0387169063fdef910690610cdb90889088908890889088906004016112be565b602060405180830381865afa158015610cf8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d1c9190611312565b610d7b576040517f5caaf8930000000000000000000000000000000000000000000000000000000081526001600160a01b038088166004830152808716602483018190526044830152851660648201526084810184905260a40161048a565b505050505050565b600054610100900460ff16610e005760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e67000000000000000000000000000000000000000000606482015260840161048a565b60c9805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6001600160a01b0381163b610eac5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e747261637400000000000000000000000000000000000000606482015260840161048a565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b610f0383610f1f565b600082511180610f105750805b15610b1c576105528383610f5f565b610f2881610e2f565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b610fde5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e74726163740000000000000000000000000000000000000000000000000000606482015260840161048a565b600080846001600160a01b031684604051610ff99190611360565b600060405180830381855af49150503d8060008114611034576040519150601f19603f3d011682016040523d82523d6000602084013e611039565b606091505b509150915061106182826040518060600160405280602781526020016113b06027913961106a565b95945050505050565b60608315611079575081610a23565b8251156110895782518084602001fd5b8160405162461bcd60e51b815260040161048a919061137c565b6000602082840312156110b557600080fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114610a2357600080fd5b6001600160a01b03811681146106f357600080fd5b60008060006060848603121561110f57600080fd5b833561111a816110e5565b9250602084013561112a816110e5565b929592945050506040919091013590565b60006020828403121561114d57600080fd5b8135610a23816110e5565b6020810160038310611193577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b91905290565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080604083850312156111db57600080fd5b82356111e6816110e5565b9150602083013567ffffffffffffffff8082111561120357600080fd5b818501915085601f83011261121757600080fd5b81358181111561122957611229611199565b604051601f8201601f19908116603f0116810190838211818310171561125157611251611199565b8160405282815288602084870101111561126a57600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b60006020828403121561129e57600080fd5b5035919050565b6000602082840312156112b757600080fd5b5051919050565b60006001600160a01b03808816835280871660208401525084604083015260806060830152826080830152828460a0840137600060a0848401015260a0601f19601f85011683010190509695505050505050565b60006020828403121561132457600080fd5b81518015158114610a2357600080fd5b60005b8381101561134f578181015183820152602001611337565b838111156105525750506000910152565b60008251611372818460208701611334565b9190910192915050565b602081526000825180602084015261139b816040850160208701611334565b601f01601f1916919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212208aa07b3065df8d94fde633b52e5de095efb421c0b23682050ceea2592e6a092764736f6c634300080a0033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b5060043610620000cd5760003560e01c806351c68301116200007f578063a5d1805a1162000062578063a5d1805a14620001c3578063eee774ca14620001cb578063f10832f114620001df57600080fd5b806351c68301146200017c5780637004cac1146200019157600080fd5b80630cbcae7011620000b45780630cbcae70146200012b578063309227b8146200013d5780633bb1847f146200015657600080fd5b806301ffc9a714620000d25780630af30a7f14620000fe575b600080fd5b620000e9620000e336600462000aa2565b62000207565b60405190151581526020015b60405180910390f35b60015462000112906001600160a01b031681565b6040516001600160a01b039091168152602001620000f5565b6001546001600160a01b031662000112565b62000147620002a1565b604051620000f5919062000b36565b6200016d6200016736600462000bb0565b620002c2565b604051620000f5919062000d19565b60408051602081019091526000815262000147565b620001b2620001a236600462000e01565b6060806060955095509592505050565b604051620000f59392919062000f6c565b606062000147565b60005462000112906001600160a01b031681565b620001f6620001f036600462000fab565b620005d2565b604051620000f59392919062001001565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f7284f6dc0000000000000000000000000000000000000000000000000000000014806200029b57507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b6060604051806060016040528060228152602001620018a560229139905090565b606083620002d2576002620002d5565b60035b60ff1667ffffffffffffffff811115620002f357620002f362000d2e565b6040519080825280602002602001820160405280156200034e57816020015b6040805160a081018252600080825260208083018290529282018190526060820181905260808201528252600019909201910181620003125790505b506040805160a081019091529091508060018152602001886001600160a01b03168152602001876001600160a01b0316815260200160006001600160a01b031681526020017fbf04b4486c9663d805744005c3da000eda93de6e3308a4a7a812eb565327b78d81525081600081518110620003cd57620003cd62001039565b60209081029190910101526040805160a081019091528060018152602001876001600160a01b03168152602001886001600160a01b0316815260200160006001600160a01b03168152602001600160009054906101000a90046001600160a01b03166001600160a01b031663b73fa1e76040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200046d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200049391906200104f565b81525081600181518110620004ac57620004ac62001039565b60209081029190910101528315620005c8576040805160a08101909152806001815260200186866000818110620004e757620004e762001039565b9050602002016020810190620004fe919062001069565b6001600160a01b03168152602001876001600160a01b0316815260200160006001600160a01b0316815260200160008054906101000a90046001600160a01b03166001600160a01b031663b73fa1e76040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200057d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620005a391906200104f565b81525081600281518110620005bc57620005bc62001039565b60200260200101819052505b9695505050505050565b600060608060008085806020019051810190620005f0919062001089565b9092509050816001600160a01b0381166200065d576000805460408051602081018252928352516001600160a01b0390911691906200062f9062000a94565b6200063c929190620010ba565b604051809103906000f08015801562000659573d6000803e3d6000fd5b5090505b604080516001600160a01b038a81166024830152838116604483015260648083018690528351808403909101815260849092019092526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f1794bb3c0000000000000000000000000000000000000000000000000000000017905290841615620006ec576002620006ef565b60035b60ff1667ffffffffffffffff8111156200070d576200070d62000d2e565b6040519080825280602002602001820160405280156200076857816020015b6040805160a0810182526000808252602080830182905292820181905260608201819052608082015282526000199092019101816200072c5790505b506040805160018082528183019092529196506020808301908036833701905050600154909650620007a4906001600160a01b03168262000a3b565b6040805160a0810190915290975080600081526020018a6001600160a01b03168152602001886001600160a01b0316815260200160006001600160a01b031681526020017fbf04b4486c9663d805744005c3da000eda93de6e3308a4a7a812eb565327b78d8152508560008151811062000822576200082262001039565b60209081029190910101526040805160a081019091528060008152602001886001600160a01b031681526020018a6001600160a01b0316815260200160006001600160a01b03168152602001600160009054906101000a90046001600160a01b03166001600160a01b031663b73fa1e76040518163ffffffff1660e01b8152600401602060405180830381865afa158015620008c2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620008e891906200104f565b8152508560018151811062000901576200090162001039565b60209081029190910101526001600160a01b038416620009f9576040805160a081019091528060008152602001836001600160a01b03168152602001886001600160a01b0316815260200160006001600160a01b0316815260200160008054906101000a90046001600160a01b03166001600160a01b031663b73fa1e76040518163ffffffff1660e01b8152600401602060405180830381865afa158015620009ae573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620009d491906200104f565b81525085600281518110620009ed57620009ed62001039565b60200260200101819052505b818660008151811062000a105762000a1062001039565b60200260200101906001600160a01b031690816001600160a01b031681525050505050509250925092565b600062000a49838362000a50565b9392505050565b6000828260405162000a629062000a94565b62000a6f929190620010ba565b604051809103906000f08015801562000a8c573d6000803e3d6000fd5b509392505050565b6107be80620010e783390190565b60006020828403121562000ab557600080fd5b81357fffffffff000000000000000000000000000000000000000000000000000000008116811462000a4957600080fd5b6000815180845260005b8181101562000b0e5760208185018101518683018201520162000af0565b8181111562000b21576000602083870101525b50601f01601f19169290920160200192915050565b60208152600062000a49602083018462000ae6565b6001600160a01b038116811462000b6157600080fd5b50565b60008083601f84011262000b7757600080fd5b50813567ffffffffffffffff81111562000b9057600080fd5b60208301915083602082850101111562000ba957600080fd5b9250929050565b6000806000806000806080878903121562000bca57600080fd5b863562000bd78162000b4b565b9550602087013562000be98162000b4b565b9450604087013567ffffffffffffffff8082111562000c0757600080fd5b818901915089601f83011262000c1c57600080fd5b81358181111562000c2c57600080fd5b8a60208260051b850101111562000c4257600080fd5b60208301965080955050606089013591508082111562000c6157600080fd5b5062000c7089828a0162000b64565b979a9699509497509295939492505050565b60008151808452602080850194508084016000805b8481101562000d0d5782518051600480821062000cc157634e487b7160e01b855260218152602485fd5b508952808501516001600160a01b03908116868b01526040808301518216908b0152606080830151909116908a01526080908101519089015260a0909701969183019160010162000c97565b50959695505050505050565b60208152600062000a49602083018462000c82565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171562000d705762000d7062000d2e565b604052919050565b80606081018310156200029b57600080fd5b600082601f83011262000d9c57600080fd5b813567ffffffffffffffff81111562000db95762000db962000d2e565b62000dce6020601f19601f8401160162000d44565b81815284602083860101111562000de457600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060e0868803121562000e1a57600080fd5b853562000e278162000b4b565b945060208681013562000e3a8162000b4b565b9450604087013567ffffffffffffffff8082111562000e5857600080fd5b818901915089601f83011262000e6d57600080fd5b81358181111562000e825762000e8262000d2e565b8060051b62000e9385820162000d44565b918252838101850191858101908d84111562000eae57600080fd5b948601945b8386101562000edc578535925062000ecb8362000b4b565b828252948601949086019062000eb3565b8099505050505062000ef28a60608b0162000d78565b945060c089013592508083111562000f0957600080fd5b505062000f198882890162000d8a565b9150509295509295909350565b600081518084526020808501945080840160005b8381101562000f615781516001600160a01b03168752958201959082019060010162000f3a565b509495945050505050565b60608152600062000f81606083018662000f26565b828103602084015262000f95818662000ae6565b90508281036040840152620005c8818562000c82565b6000806040838503121562000fbf57600080fd5b823562000fcc8162000b4b565b9150602083013567ffffffffffffffff81111562000fe957600080fd5b62000ff78582860162000d8a565b9150509250929050565b6001600160a01b038416815260606020820152600062001025606083018562000f26565b8281036040840152620005c8818562000c82565b634e487b7160e01b600052603260045260246000fd5b6000602082840312156200106257600080fd5b5051919050565b6000602082840312156200107c57600080fd5b813562000a498162000b4b565b600080604083850312156200109d57600080fd5b8251620010aa8162000b4b565b6020939093015192949293505050565b6001600160a01b0383168152604060208201526000620010de604083018462000ae6565b94935050505056fe60806040526040516107be3803806107be83398101604081905261002291610314565b61002e82826000610035565b5050610431565b61003e8361006b565b60008251118061004b5750805b156100665761006483836100ab60201b6100291760201c565b505b505050565b610074816100d7565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606100d08383604051806060016040528060278152602001610797602791396101a9565b9392505050565b6100ea8161028760201b6100551760201c565b6101515760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084015b60405180910390fd5b806101887f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b61029660201b6100711760201c565b80546001600160a01b0319166001600160a01b039290921691909117905550565b60606001600160a01b0384163b6102115760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610148565b600080856001600160a01b03168560405161022c91906103e2565b600060405180830381855af49150503d8060008114610267576040519150601f19603f3d011682016040523d82523d6000602084013e61026c565b606091505b50909250905061027d828286610299565b9695505050505050565b6001600160a01b03163b151590565b90565b606083156102a85750816100d0565b8251156102b85782518084602001fd5b8160405162461bcd60e51b815260040161014891906103fe565b634e487b7160e01b600052604160045260246000fd5b60005b838110156103035781810151838201526020016102eb565b838111156100645750506000910152565b6000806040838503121561032757600080fd5b82516001600160a01b038116811461033e57600080fd5b60208401519092506001600160401b038082111561035b57600080fd5b818501915085601f83011261036f57600080fd5b815181811115610381576103816102d2565b604051601f8201601f19908116603f011681019083821181831017156103a9576103a96102d2565b816040528281528860208487010111156103c257600080fd5b6103d38360208301602088016102e8565b80955050505050509250929050565b600082516103f48184602087016102e8565b9190910192915050565b602081526000825180602084015261041d8160408501602087016102e8565b601f01601f19169190910160400192915050565b610357806104406000396000f3fe60806040523661001357610011610017565b005b6100115b610027610022610074565b6100b9565b565b606061004e83836040518060600160405280602781526020016102fb602791396100dd565b9392505050565b73ffffffffffffffffffffffffffffffffffffffff163b151590565b90565b60006100b47f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5473ffffffffffffffffffffffffffffffffffffffff1690565b905090565b3660008037600080366000845af43d6000803e8080156100d8573d6000f35b3d6000fd5b606073ffffffffffffffffffffffffffffffffffffffff84163b610188576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e7472616374000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6000808573ffffffffffffffffffffffffffffffffffffffff16856040516101b0919061028d565b600060405180830381855af49150503d80600081146101eb576040519150601f19603f3d011682016040523d82523d6000602084013e6101f0565b606091505b509150915061020082828661020a565b9695505050505050565b6060831561021957508161004e565b8251156102295782518084602001fd5b816040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161017f91906102a9565b60005b83811015610278578181015183820152602001610260565b83811115610287576000848401525b50505050565b6000825161029f81846020870161025d565b9190910192915050565b60208152600082518060208401526102c881604085016020870161025d565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220541b917e30cdb6190a188d89351df658042e2f895a39400f1e3b929696bd0a0064736f6c634300080a0033416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c65642861646472657373206d756c7469706c7948656c7065722c2075696e74206e756d29a2646970667358221220f5f2a4f17873d6b47808eff9b97cdafa0d6548f63ea60f6a765329f34a38bc3664736f6c634300080a0033",
  "devdoc": {
    "author": "Aragon Association - 2022",
    "kind": "dev",
    "methods": {
      "getImplementationAddress()": {
        "details": "The implementation can be instantiated via the `new` keyword, cloned via the minimal clones pattern (see [ERC-1167](https://eips.ethereum.org/EIPS/eip-1167)), or proxied via the UUPS pattern (see [ERC-1822](https://eips.ethereum.org/EIPS/eip-1822)).",
        "returns": {
          "_0": "address The address of the plugin implementation contract."
        }
      },
      "prepareInstallation(address,bytes)": {
        "params": {
          "_dao": "The address of the installing DAO.",
          "_data": "The `bytes` encoded data containing the input parameters for the installation as specified in the `prepareInstallationDataABI()` function."
        },
        "returns": {
          "helpers": "The address array of all helpers (contracts or EOAs) associated with the plugin after the installation.",
          "permissions": "The array of multi-targeted permission operations to be applied by the `PluginSetupProcessor` to the installing DAO.",
          "plugin": "The address of the `Plugin` contract being prepared for installation."
        }
      },
      "prepareInstallationDataABI()": {
        "returns": {
          "_0": "The ABI in string format."
        }
      },
      "prepareUninstallation(address,address,address[],bytes)": {
        "details": "The array of `_currentHelpers` has to be specified in the same order as they were returned from previous setups preparation steps (the latest `prepareInstallation` or `prepareUpdate` step that has happend) on which this update is prepared for.",
        "params": {
          "_currentHelpers": "The address array of all current helpers (contracts or EOAs) associated with the plugin to update from.",
          "_dao": "The address of the uninstalling DAO.",
          "_data": "The `bytes` encoded data containing the input parameters for the uninstalltion as specified in the `prepareUninstallationDataABI()` function.",
          "_plugin": "The address of the `Plugin` contract to update from."
        },
        "returns": {
          "permissions": "The array of multi-targeted permission operations to be applied by the `PluginSetupProcessor` to the uninstalling DAO."
        }
      },
      "prepareUninstallationDataABI()": {
        "returns": {
          "_0": "The ABI in string format."
        }
      },
      "prepareUpdate(address,address,address[],uint16[3],bytes)": {
        "details": "The array of `_currentHelpers` has to be specified in the same order as they were returned from previous setups preparation steps (the latest `prepareInstallation` or `prepareUpdate` step that has happend) on which this update is prepared for.",
        "params": {
          "_currentHelpers": "The address array of all current helpers (contracts or EOAs) associated with the plugin to update from.",
          "_dao": "The address of the updating DAO.",
          "_data": "The `bytes` encoded data containing the input parameters for the update as specified in the `prepareUpdateDataABI()` function.",
          "_oldVersion": "The semantic version of the plugin to update from.",
          "_plugin": "The address of the `Plugin` contract to update from."
        },
        "returns": {
          "initData": "The initialization data to be passed to upgradeable contracts when the update is applied in the `PluginSetupProcessor`.",
          "permissions": "The array of multi-targeted permission operations to be applied by the `PluginSetupProcessor` to the updating DAO.",
          "updatedHelpers": "The address array of helpers (contracts or EOAs) associated with the plugin after the update."
        }
      },
      "prepareUpdateDataABI()": {
        "details": "The empty implemention is provided here so that this doesn't need to be overriden and implemented. This is relevant, for example, for the initial version of a plugin for which no update exists.",
        "returns": {
          "_0": "The ABI in string format."
        }
      },
      "supportsInterface(bytes4)": {
        "params": {
          "interfaceId": "The ID of the interace."
        },
        "returns": {
          "_0": "bool Returns true if the interface is supported."
        }
      }
    },
    "title": "CounterV1PluginSetup",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getImplementationAddress()": {
        "notice": "Returns the plugin's base implementation."
      },
      "prepareInstallation(address,bytes)": {
        "notice": "Prepares the installation of a plugin."
      },
      "prepareInstallationDataABI()": {
        "notice": "The ABI required to decode the `bytes` data in `prepareInstallation()`."
      },
      "prepareUninstallation(address,address,address[],bytes)": {
        "notice": "Prepares the uninstallation of a plugin."
      },
      "prepareUninstallationDataABI()": {
        "notice": "The ABI required to decode the `bytes` data in `prepareUninstallation()`."
      },
      "prepareUpdate(address,address,address[],uint16[3],bytes)": {
        "notice": "Prepares the update of a plugin."
      },
      "prepareUpdateDataABI()": {
        "notice": "The ABI required to decode the `bytes` data in `prepareUpdate()`."
      },
      "supportsInterface(bytes4)": {
        "notice": "Checks if this or the parent contract supports an interface by its ID."
      }
    },
    "notice": "The setup contract of the `CounterV1` plugin.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2454,
        "contract": "contracts/counter/CounterV1PluginSetup.sol:CounterV1PluginSetup",
        "label": "multiplyHelperBase",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(MultiplyHelper)2823"
      },
      {
        "astId": 2457,
        "contract": "contracts/counter/CounterV1PluginSetup.sol:CounterV1PluginSetup",
        "label": "counterBase",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(CounterV1)2429"
      }
    ],
    "types": {
      "t_contract(CounterV1)2429": {
        "encoding": "inplace",
        "label": "contract CounterV1",
        "numberOfBytes": "20"
      },
      "t_contract(MultiplyHelper)2823": {
        "encoding": "inplace",
        "label": "contract MultiplyHelper",
        "numberOfBytes": "20"
      }
    }
  }
}